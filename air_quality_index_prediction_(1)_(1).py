# -*- coding: utf-8 -*-
"""Air_quality_index_prediction (1) (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eQuAoh5afAI86UvyXDmgdJTa5U83kcUG
"""

import numpy as np
import pandas as pd

# loading the data from the csv file to pandas dataframe
air_quality_data = pd.read_csv("AirQualityUCI.csv")

# printing the first 5 rows of the dataframe
air_quality_data.head()

"""All the values are sparated by ;
Few columns have Comma in the place of the decimal point
"""

# loading the data from the csv file to pandas dataframe
air_quality_data = pd.read_csv("AirQualityUCI.csv", sep=';',decimal=',')

# printing the first 5 rows of the dataframe
air_quality_data.head()

# removing the last two columns from the dataframe
air_quality_data = air_quality_data.iloc[:,:-2]

# printing the first 5 rows of the dataframe
air_quality_data.head()

# printing the first 5 rows of the dataframe
air_quality_data.tail()

air_quality_data.shape

air_quality_data.loc[[9356]]

"""9356 represnt the last data point in the dataframe and the reamining rows are just null values

index=9356
row=9357th row
take the first 9357 rows alone from the dataframe
"""

air_quality_data = air_quality_data.head(9357)

air_quality_data.head()

air_quality_data.tail()

air_quality_data.shape

#getting some info about the data
air_quality_data.info()

#checking thye number of missing values in the dataframe
air_quality_data.isnull().sum()

"""
This shows that there are no missing values in the dataset. But the actual mvalues are tagged with the values "-200"

This is described in the UCI repository documentation


"""

#Counting the number of times -200 appears in the data
air_quality_data.isin([-200]).sum(axis=0)

"""**Handling the missing values**

Convert all -200 to NaN

Replace all NaN values with mean of that specific column
"""

air_quality_data= air_quality_data.replace(to_replace=-200,value=np.NaN)

#checking thye number of missing values in the dataframe
air_quality_data.isnull().sum()

"""This shows the actual number of missing values"""

air_quality_data.tail()

type(air_quality_data)

# air_quality_data.mean()

df = pd.read_csv("AirQualityUCI.csv", sep=";", header=0)

attribute_name = 'NMHC(GT)'
mean_value = df[attribute_name].mean()

print("Mean", attribute_name, ":", mean_value)

air_quality_data = air_quality_data.fillna(air_quality_data.mean)

air_quality_data.tail()

air_quality_data.isnull().sum()

"""Two Tasks can be performed on this dataset
1. Forecasting
2. Regression

Forecasting with FB Prophet Algorithm

FB Prophet Documentation :  https://facebook.github.io/prophet/
"""

#Converting the  date from DD/MM/YYYY to YYYY-MM-DD
date_info = pd.to_datetime(air_quality_data['Date'])
print(date_info)

import pandas as pd

# Assuming air_quality_data is your DataFrame containing columns 'Date' and 'Time'

# Convert 'Date' and 'Time' columns to datetime
air_quality_data['Date'] = pd.to_datetime(air_quality_data['Date'], format='%d/%m/%Y')
air_quality_data['Time'] = pd.to_datetime(air_quality_data['Time'], format='%H.%M.%S').dt.time

# Combine 'Date' and 'Time' into a new 'DateTime' column
air_quality_data['DateTime'] = pd.to_datetime(air_quality_data['Date'].dt.strftime('%Y-%m-%d') + ' ' + air_quality_data['Time'].astype(str))

# Drop 'Date' and 'Time' columns if needed
# air_quality_data.drop(['Date', 'Time'], axis=1, inplace=True)

time_info = air_quality_data['Time']

def replace_if_needed(time_obj):
    if '.' in time_obj.strftime('%H:%M:%S'):
        return time_obj.strftime('%H:%M:%S').replace('.', ':')
    else:
        return time_obj  # Return the original time_obj if no replacement is needed

time_info = time_info.apply(replace_if_needed)

print(time_info)

print(type(time_info))
print(type(date_info))

#combining 2 series to panda dataframe
#date_time = pd.concat([date_info,time_info],axis=1)

# Assuming date_info and time_info are lists
date_info = ['01/01/2022', '02/01/2022', '03/01/2022']
time_info = ['10.30.00', '11.45.00', '12.15.00']

# Create Series objects from the lists
date_series = pd.Series(date_info)
time_series = pd.Series(time_info)

# Concatenate the Series into a DataFrame
date_time = pd.concat([date_series, time_series], axis=1)

# Optionally, you can rename the columns if needed
date_time.columns = ['Date', 'Time']

# Print the resulting DataFrame
print(date_time)

date_time.head()

#combining date and time
date_time['ds']=date_time['Date'].astype(str)+''+date_time['Time'].astype(str)

date_time.head()

date_time.info()

"""We have to convert ds from object datatype to date time format"""

data = pd.DataFrame()

# Convert 'ds' column to datetime
#datetime['ds'] = pd.to_datetime(date_time['ds'])


# Convert 'ds' column to datetime
#data['ds'] = pd.to_datetime(date_time['ds'])
# Convert 'ds' column to datetime with the correct format string
data['ds'] = pd.to_datetime(date_time['ds'], format='%d/%m/%Y%H.%M.%S')

data.head()

data['y'] = air_quality_data['RH']

data.head()

pip install prophet

from prophet import Prophet

data['ds'] = pd.to_datetime(data['ds'])

#Training the Prophet Model
#model = Prophet()
#model.fit(data)

# Check column names
print(data.columns)

# Check data types
print(data.dtypes)

# Check for missing values
print(data.isnull().sum())

# Print the first few rows of the DataFrame
print(data.head())

from prophet import Prophet

# Initialize the Prophet model
model = Prophet()

# Fit the model with the data
model.fit(data)

print(data.dtypes)

print(data.isnull().sum())

print(data.head())



future=model.make_future_dataframe(periods=365,freq='H')

forecast = model.predict(future)
forecast[['ds','yhat','yhat_lower','yhat_upper']].tail()

fig1=model.plot(forecast)

fig2= model.plot_components(forecast)

